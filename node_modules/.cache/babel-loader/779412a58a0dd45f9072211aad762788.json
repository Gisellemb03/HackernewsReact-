{"ast":null,"code":"import _slicedToArray from\"/home/gimeba/hackernews-react-apollo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _taggedTemplateLiteral from\"/home/gimeba/hackernews-react-apollo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject;import React,{useState}from'react';import{useLazyQuery}from'@apollo/client';import gql from'graphql-tag';import Link from'./Link';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var FEED_SEARCH_QUERY=gql(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  query FeedSearchQuery($search: String) {\\n  links(search: $search){\\n      id\\n      url\\n        description\\n        postedBy {\\n          id\\n          username\\n        }\\n        votes {\\n          edges{\\n            node{\\n              id\\n               user {\\n                id\\n            }\\n            }\\n          }\\n\\n \\n\\n        }\\n       # createdAt\\n  }\\n}\\n\"])));var Search=function Search(){var _useState=useState(''),_useState2=_slicedToArray(_useState,2),searchFilter=_useState2[0],setSearchFilter=_useState2[1];var _useLazyQuery=useLazyQuery(FEED_SEARCH_QUERY),_useLazyQuery2=_slicedToArray(_useLazyQuery,2),executeSearch=_useLazyQuery2[0],data=_useLazyQuery2[1].data;return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{children:[\"Search\",/*#__PURE__*/_jsx(\"input\",{type:\"text\",onChange:function onChange(e){return setSearchFilter(e.target.value);}}),/*#__PURE__*/_jsx(\"button\",{onClick:function onClick(){return executeSearch({variables:{search:searchFilter}});},children:\"OK\"})]}),data&&data.links.map(function(link,index){return/*#__PURE__*/_jsx(Link,{link:link,index:index},link.id);})]});};export default Search;","map":{"version":3,"sources":["/home/gimeba/hackernews-react-apollo/src/components/Search.js"],"names":["React","useState","useLazyQuery","gql","Link","FEED_SEARCH_QUERY","Search","searchFilter","setSearchFilter","executeSearch","data","e","target","value","variables","search","links","map","link","index","id"],"mappings":"0VAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,OAASC,YAAT,KAA6B,gBAA7B,CACA,MAAOC,CAAAA,GAAP,KAAgB,aAAhB,CACA,MAAOC,CAAAA,IAAP,KAAiB,QAAjB,C,6IAMA,GAAMC,CAAAA,iBAAiB,CAAGF,GAAH,icAAvB,CA8BA,GAAMG,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,EAAM,CACnB,cAAwCL,QAAQ,CAAC,EAAD,CAAhD,wCAAOM,YAAP,eAAqBC,eAArB,eACA,kBAAkCN,YAAY,CAC5CG,iBAD4C,CAA9C,gDAAOI,aAAP,mBAAwBC,IAAxB,mBAAwBA,IAAxB,CAMA,mBACE,wCACE,6CAEE,cACE,IAAI,CAAC,MADP,CAEE,QAAQ,CAAE,kBAACC,CAAD,QAAOH,CAAAA,eAAe,CAACG,CAAC,CAACC,MAAF,CAASC,KAAV,CAAtB,EAFZ,EAFF,cAME,eACE,OAAO,CAAE,yBACPJ,CAAAA,aAAa,CAAC,CACZK,SAAS,CAAE,CAAEC,MAAM,CAAER,YAAV,CADC,CAAD,CADN,EADX,gBANF,GADF,CAiBGG,IAAI,EACHA,IAAI,CAACM,KAAL,CAAWC,GAAX,CAAe,SAACC,IAAD,CAAOC,KAAP,qBACb,KAAC,IAAD,EAAoB,IAAI,CAAED,IAA1B,CAAgC,KAAK,CAAEC,KAAvC,EAAWD,IAAI,CAACE,EAAhB,CADa,EAAf,CAlBJ,GADF,CAwBD,CAhCD,CAiCA,cAAed,CAAAA,MAAf","sourcesContent":["import React, { useState } from 'react';\nimport { useLazyQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport Link from './Link';\n\n \n\n \n\nconst FEED_SEARCH_QUERY = gql`\n  query FeedSearchQuery($search: String) {\n  links(search: $search){\n      id\n      url\n        description\n        postedBy {\n          id\n          username\n        }\n        votes {\n          edges{\n            node{\n              id\n               user {\n                id\n            }\n            }\n          }\n\n \n\n        }\n       # createdAt\n  }\n}\n`;\n\n \n\nconst Search = () => {\n  const [searchFilter, setSearchFilter] = useState('');\n  const [executeSearch, { data }] = useLazyQuery(\n    FEED_SEARCH_QUERY\n  );\n\n \n\n  return (\n    <>\n      <div>\n        Search\n        <input\n          type=\"text\"\n          onChange={(e) => setSearchFilter(e.target.value)}\n        />\n        <button\n          onClick={() =>\n            executeSearch({\n              variables: { search: searchFilter }\n            })\n          }\n        >\n          OK\n        </button>\n      </div>\n      {data &&\n        data.links.map((link, index) => (\n          <Link key={link.id} link={link} index={index} />\n        ))}\n    </>\n  );\n};\nexport default Search;\n\n\n"]},"metadata":{},"sourceType":"module"}