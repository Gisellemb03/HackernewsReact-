{"ast":null,"code":"var _jsxFileName = \"/home/gimeba/hackernews-react-apollo/src/components/Search.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useLazyQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport Link from './Link';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst FEED_SEARCH_QUERY = gql`\n  query FeedSearchQuery($filter: String!) {\n    feed(filter: $filter) {\n      id\n      links {\n        id\n        url\n        description\n        createdAt\n        postedBy {\n          id\n          name\n        }\n        votes {\n          id\n          user {\n            id\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst Search = () => {\n  _s();\n\n  const [searchFilter, setSearchFilter] = useState('');\n  const [executeSearch, {\n    data\n  }] = useLazyQuery(FEED_SEARCH_QUERY);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Search\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: e => setSearchFilter(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => executeSearch({\n          variables: {\n            filter: searchFilter\n          }\n        }),\n        children: \"OK\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), data && data.feed.links.map((link, index) => /*#__PURE__*/_jsxDEV(Link, {\n      link: link,\n      index: index\n    }, link.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }, this))]\n  }, void 0, true);\n};\n\n_s(Search, \"fdpAVvyNgKkAx814UWkDgDogQZ0=\", false, function () {\n  return [useLazyQuery];\n});\n\n_c = Search;\nexport default Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["/home/gimeba/hackernews-react-apollo/src/components/Search.js"],"names":["React","useState","useLazyQuery","gql","Link","FEED_SEARCH_QUERY","Search","searchFilter","setSearchFilter","executeSearch","data","e","target","value","variables","filter","feed","links","map","link","index","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,IAAP,MAAiB,QAAjB;;;AAEA,MAAMC,iBAAiB,GAAGF,GAAI;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAtBA;;AAwBA,MAAMG,MAAM,GAAG,MAAM;AAAA;;AACjB,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCP,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACQ,aAAD,EAAgB;AAAEC,IAAAA;AAAF,GAAhB,IAA4BR,YAAY,CAC5CG,iBAD4C,CAA9C;AAIA,sBACE;AAAA,4BACA;AAAA,wCAEE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,QAAQ,EAAGM,CAAD,IAAOH,eAAe,CAACG,CAAC,CAACC,MAAF,CAASC,KAAV;AAFlC;AAAA;AAAA;AAAA;AAAA,cAFF,eAME;AACE,QAAA,OAAO,EAAE,MACPJ,aAAa,CAAC;AACZK,UAAAA,SAAS,EAAE;AAAEC,YAAAA,MAAM,EAAER;AAAV;AADC,SAAD,CAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,EAiBCG,IAAI,IACHA,IAAI,CAACM,IAAL,CAAUC,KAAV,CAAgBC,GAAhB,CAAoB,CAACC,IAAD,EAAOC,KAAP,kBAClB,QAAC,IAAD;AAAoB,MAAA,IAAI,EAAED,IAA1B;AAAgC,MAAA,KAAK,EAAEC;AAAvC,OAAWD,IAAI,CAACE,EAAhB;AAAA;AAAA;AAAA;AAAA,YADF,CAlBF;AAAA,kBADF;AA0BD,CAhCH;;GAAMf,M;UAEgCJ,Y;;;KAFhCI,M;AAkCJ,eAAeA,MAAf","sourcesContent":["import React, { useState } from 'react';\nimport { useLazyQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport Link from './Link';\n\nconst FEED_SEARCH_QUERY = gql`\n  query FeedSearchQuery($filter: String!) {\n    feed(filter: $filter) {\n      id\n      links {\n        id\n        url\n        description\n        createdAt\n        postedBy {\n          id\n          name\n        }\n        votes {\n          id\n          user {\n            id\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst Search = () => {\n    const [searchFilter, setSearchFilter] = useState('');\n    const [executeSearch, { data }] = useLazyQuery(\n      FEED_SEARCH_QUERY\n    );\n  \n    return (\n      <>\n      <div>\n        Search\n        <input\n          type=\"text\"\n          onChange={(e) => setSearchFilter(e.target.value)}\n        />\n        <button\n          onClick={() =>\n            executeSearch({\n              variables: { filter: searchFilter }\n            })\n          }\n        >\n          OK\n        </button>\n      </div>\n      {data &&\n        data.feed.links.map((link, index) => (\n          <Link key={link.id} link={link} index={index} />\n        ))}\n    </>\n    );\n  \n  \n  };\n  \n  export default Search;\n  "]},"metadata":{},"sourceType":"module"}