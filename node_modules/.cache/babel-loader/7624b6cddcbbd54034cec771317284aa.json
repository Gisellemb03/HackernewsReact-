{"ast":null,"code":"var _jsxFileName = \"/home/gimeba/hackernews-react-apollo/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nimport { setContext } from '@apollo/client/link/context';\nimport { AUTH_TOKEN } from './constants';\nimport { onError } from \"@apollo/client/link/error\";\nimport { ApolloProvider, ApolloClient, createHttpLink, InMemoryCache, from } from '@apollo/client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst httpLink = createHttpLink({\n  uri: 'http://35.232.232.192:8090/graphql/'\n});\nconst authLink = setContext((_, {\n  headers\n}) => {\n  const token = localStorage.getItem(AUTH_TOKEN);\n  return {\n    headers: { ...headers,\n      authorization: token ? `jwt ${token}` : ''\n    }\n  };\n});\nconst errorLink = onError(({\n  graphQLErrors,\n  networkError\n}) => {\n  if (graphQLErrors) graphQLErrors.forEach(({\n    message,\n    locations,\n    path\n  }) => console.log(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`));\n  if (networkError) console.log(`[Network error]: ${networkError}`);\n});\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache()\n});\nReactDOM.render( /*#__PURE__*/_jsxDEV(BrowserRouter, {\n  children: /*#__PURE__*/_jsxDEV(ApolloProvider, {\n    client: client,\n    children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 51,\n  columnNumber: 3\n}, this), document.getElementById('root'));\nserviceWorker.unregister();","map":{"version":3,"sources":["/home/gimeba/hackernews-react-apollo/src/index.js"],"names":["React","ReactDOM","App","serviceWorker","BrowserRouter","setContext","AUTH_TOKEN","onError","ApolloProvider","ApolloClient","createHttpLink","InMemoryCache","from","httpLink","uri","authLink","_","headers","token","localStorage","getItem","authorization","errorLink","graphQLErrors","networkError","forEach","message","locations","path","console","log","client","link","concat","cache","render","document","getElementById","unregister"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,oBAAP;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAASC,UAAT,QAA2B,aAA3B;AACA,SAASC,OAAT,QAAwB,2BAAxB;AAEA,SACEC,cADF,EAEEC,YAFF,EAGEC,cAHF,EAIEC,aAJF,EAKEC,IALF,QAMO,gBANP;;AAQA,MAAMC,QAAQ,GAAGH,cAAc,CAAC;AAC9BI,EAAAA,GAAG,EAAE;AADyB,CAAD,CAA/B;AAIA,MAAMC,QAAQ,GAAGV,UAAU,CAAC,CAACW,CAAD,EAAI;AAAEC,EAAAA;AAAF,CAAJ,KAAoB;AAC9C,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqBd,UAArB,CAAd;AACA,SAAO;AACLW,IAAAA,OAAO,EAAE,EACP,GAAGA,OADI;AAEPI,MAAAA,aAAa,EAAEH,KAAK,GAAI,OAAMA,KAAM,EAAhB,GAAoB;AAFjC;AADJ,GAAP;AAMD,CAR0B,CAA3B;AAUA,MAAMI,SAAS,GAAGf,OAAO,CAAC,CAAC;AAAEgB,EAAAA,aAAF;AAAiBC,EAAAA;AAAjB,CAAD,KAAqC;AAC7D,MAAID,aAAJ,EACEA,aAAa,CAACE,OAAd,CAAsB,CAAC;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,SAAX;AAAsBC,IAAAA;AAAtB,GAAD,KACpBC,OAAO,CAACC,GAAR,CACG,6BAA4BJ,OAAQ,eAAcC,SAAU,WAAUC,IAAK,EAD9E,CADF;AAMF,MAAIJ,YAAJ,EAAkBK,OAAO,CAACC,GAAR,CAAa,oBAAmBN,YAAa,EAA7C;AACnB,CATwB,CAAzB;AAYA,MAAMO,MAAM,GAAG,IAAItB,YAAJ,CAAiB;AAC9BuB,EAAAA,IAAI,EAAEjB,QAAQ,CAACkB,MAAT,CAAgBpB,QAAhB,CADwB;AAE9BqB,EAAAA,KAAK,EAAE,IAAIvB,aAAJ;AAFuB,CAAjB,CAAf;AAKAV,QAAQ,CAACkC,MAAT,eACE,QAAC,aAAD;AAAA,yBACE,QAAC,cAAD;AAAgB,IAAA,MAAM,EAAEJ,MAAxB;AAAA,2BACE,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,QADF,EAMEK,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CANF;AAQAlC,aAAa,CAACmC,UAAd","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nimport { setContext } from '@apollo/client/link/context';\nimport { AUTH_TOKEN } from './constants';\nimport { onError } from \"@apollo/client/link/error\"\n\nimport {\n  ApolloProvider,\n  ApolloClient,\n  createHttpLink,\n  InMemoryCache,\n  from\n} from '@apollo/client';\n\nconst httpLink = createHttpLink({\n  uri: 'http://35.232.232.192:8090/graphql/'\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem(AUTH_TOKEN);\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `jwt ${token}` : ''\n    }\n  };\n});\n\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors)\n    graphQLErrors.forEach(({ message, locations, path }) =>\n      console.log(\n        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`,\n      ),\n    );\n\n  if (networkError) console.log(`[Network error]: ${networkError}`);\n});\n\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache()\n});\n\nReactDOM.render(\n  <BrowserRouter>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n\n\n"]},"metadata":{},"sourceType":"module"}