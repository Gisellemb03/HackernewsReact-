{"ast":null,"code":"import _objectSpread from\"/home/gimeba/hackernews-react-apollo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import React from'react';import ReactDOM from'react-dom';import'./styles/index.css';import App from'./components/App';import*as serviceWorker from'./serviceWorker';import{BrowserRouter}from'react-router-dom';import{setContext}from'@apollo/client/link/context';import{AUTH_TOKEN}from'./constants';import{onError}from\"@apollo/client/link/error\";// 1\nimport{ApolloProvider,ApolloClient,createHttpLink,InMemoryCache,from}from'@apollo/client';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var httpLink=createHttpLink({uri:'http://35.232.232.192:8090/graphql/'});var authLink=setContext(function(_,_ref){var headers=_ref.headers;var token=localStorage.getItem(AUTH_TOKEN);return{headers:_objectSpread(_objectSpread({},headers),{},{authorization:token?\"JWT \".concat(token):''})};});var errorLink=onError(function(_ref2){var graphQLErrors=_ref2.graphQLErrors,networkError=_ref2.networkError;if(graphQLErrors)graphQLErrors.forEach(function(_ref3){var message=_ref3.message,locations=_ref3.locations,path=_ref3.path;return console.log(\"[GraphQL error]: Message: \".concat(message,\", Location: \").concat(locations,\", Path: \").concat(path));});if(networkError)console.log(\"[Network error]: \".concat(networkError));});// 3\nvar client=new ApolloClient({link:from([authLink,errorLink,httpLink]),cache:new InMemoryCache()});// 4\nReactDOM.render(/*#__PURE__*/_jsxs(BrowserRouter,{children:[/*#__PURE__*/_jsx(ApolloProvider,{client:client,children:/*#__PURE__*/_jsx(App,{})}),\",\"]}),document.getElementById('root'));serviceWorker.unregister();","map":{"version":3,"sources":["/home/gimeba/hackernews-react-apollo/src/index.js"],"names":["React","ReactDOM","App","serviceWorker","BrowserRouter","setContext","AUTH_TOKEN","onError","ApolloProvider","ApolloClient","createHttpLink","InMemoryCache","from","httpLink","uri","authLink","_","headers","token","localStorage","getItem","authorization","errorLink","graphQLErrors","networkError","forEach","message","locations","path","console","log","client","link","cache","render","document","getElementById","unregister"],"mappings":"0JAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,QAAP,KAAqB,WAArB,CACA,MAAO,oBAAP,CACA,MAAOC,CAAAA,GAAP,KAAgB,kBAAhB,CACA,MAAO,GAAKC,CAAAA,aAAZ,KAA+B,iBAA/B,CACA,OAASC,aAAT,KAA8B,kBAA9B,CACA,OAASC,UAAT,KAA2B,6BAA3B,CACA,OAASC,UAAT,KAA2B,aAA3B,CACA,OAASC,OAAT,KAAwB,2BAAxB,CAGA;AACA,OACEC,cADF,CAEEC,YAFF,CAGEC,cAHF,CAIEC,aAJF,CAMEC,IANF,KAOO,gBAPP,C,wFAWA,GAAMC,CAAAA,QAAQ,CAAGH,cAAc,CAAC,CAC9BI,GAAG,CAAE,qCADyB,CAAD,CAA/B,CAIA,GAAMC,CAAAA,QAAQ,CAAGV,UAAU,CAAC,SAACW,CAAD,MAAoB,IAAdC,CAAAA,OAAc,MAAdA,OAAc,CAC9C,GAAMC,CAAAA,KAAK,CAAGC,YAAY,CAACC,OAAb,CAAqBd,UAArB,CAAd,CACA,MAAO,CACLW,OAAO,gCACFA,OADE,MAELI,aAAa,CAAEH,KAAK,eAAUA,KAAV,EAAoB,EAFnC,EADF,CAAP,CAMD,CAR0B,CAA3B,CAUA,GAAMI,CAAAA,SAAS,CAAGf,OAAO,CAAC,eAAqC,IAAlCgB,CAAAA,aAAkC,OAAlCA,aAAkC,CAAnBC,YAAmB,OAAnBA,YAAmB,CAC7D,GAAID,aAAJ,CACEA,aAAa,CAACE,OAAd,CAAsB,mBAAGC,CAAAA,OAAH,OAAGA,OAAH,CAAYC,SAAZ,OAAYA,SAAZ,CAAuBC,IAAvB,OAAuBA,IAAvB,OACpBC,CAAAA,OAAO,CAACC,GAAR,qCAC+BJ,OAD/B,wBACqDC,SADrD,oBACyEC,IADzE,EADoB,EAAtB,EAMF,GAAIJ,YAAJ,CAAkBK,OAAO,CAACC,GAAR,4BAAgCN,YAAhC,GACnB,CATwB,CAAzB,CAUA;AACA,GAAMO,CAAAA,MAAM,CAAG,GAAItB,CAAAA,YAAJ,CAAiB,CAC9BuB,IAAI,CAAEpB,IAAI,CAAC,CAACG,QAAD,CAAWO,SAAX,CAAsBT,QAAtB,CAAD,CADoB,CAE9BoB,KAAK,CAAE,GAAItB,CAAAA,aAAJ,EAFuB,CAAjB,CAAf,CAOA;AACAV,QAAQ,CAACiC,MAAT,cACE,MAAC,aAAD,yBACE,KAAC,cAAD,EAAgB,MAAM,CAAEH,MAAxB,uBACE,KAAC,GAAD,IADF,EADF,OADF,CAOEI,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAPF,EASAjC,aAAa,CAACkC,UAAd","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nimport { setContext } from '@apollo/client/link/context';\nimport { AUTH_TOKEN } from './constants';\nimport { onError } from \"@apollo/client/link/error\"\n\n\n// 1\nimport {\n  ApolloProvider,\n  ApolloClient,\n  createHttpLink,\n  InMemoryCache,\n\n  from\n} from '@apollo/client';\n\n\n\nconst httpLink = createHttpLink({\n  uri: 'http://35.232.232.192:8090/graphql/'\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem(AUTH_TOKEN);\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `JWT ${token}` : ''\n    }\n  };\n});\n\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors)\n    graphQLErrors.forEach(({ message, locations, path }) =>\n      console.log(\n        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`,\n      ),\n    );\n\n  if (networkError) console.log(`[Network error]: ${networkError}`);\n});\n// 3\nconst client = new ApolloClient({\n  link: from([authLink, errorLink, httpLink]),\n  cache: new InMemoryCache()\n});\n\n\n\n// 4\nReactDOM.render(\n  <BrowserRouter>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>,\n  </BrowserRouter>,\n\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}